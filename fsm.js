// Generated by CoffeeScript 1.4.0

/*
  
 [Hey, this is CoffeeScript! If you're looking for the original source,
  look in "fsm.coffee", not "fsm.js".]

 Finite State Machine Designer
 portions Copyright (c) Binghamton University,
 author: Kyle J. Temkin <ktemkin@binghamton.edu>

 Based on:
 Finite State Machine Designer (http://madebyevan.com/fsm/)
 portions Copyright (c) 2010 Evan Wallace

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following
 conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
*/


(function() {
  var FSMDesigner, Transition,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  FSMDesigner = (function() {

    FSMDesigner.prototype.snap_to_padding = 20;

    FSMDesigner.prototype.hit_target_padding = 20;

    FSMDesigner.prototype.undo_history_size = 32;

    FSMDesigner.prototype.originalClick = null;

    FSMDesigner.prototype.cursorVisible = true;

    FSMDesigner.prototype.selectedObject = null;

    FSMDesigner.prototype.currentTransition = null;

    FSMDesigner.prototype.movingObject = false;

    FSMDesigner.prototype.inOutputMode = false;

    FSMDesigner.prototype.textEntryTimeout = null;

    FSMDesigner.prototype.textEnteredRecently = false;

    FSMDesigner.prototype.textUndoDelay = 2000;

    FSMDesigner.prototype.states = [];

    FSMDesigner.prototype.transitions = [];

    FSMDesigner.prototype.undo_stack = [];

    FSMDesigner.prototype.redo_stack = [];

    function FSMDesigner(canvas) {
      var canvas_handlers, event, handler, window_handlers,
        _this = this;
      this.canvas = canvas;
      canvas_handlers = {
        'mousedown': function(e) {
          return _this.handle_mousedown(e);
        },
        'doubleclock': function(e) {
          return _this.handle_doubleclick(e);
        },
        'mousemove': function(e) {
          return _this.handle_mousemove(e);
        },
        'mouseup': function(e) {
          return _this.handle_mouseup(e);
        },
        'mousedown': function(e) {
          return _this.handle_mouseup(e);
        },
        'drop': function(e) {
          return _this.handle_drop(e);
        }
      };
      for (event in canvas_handlers) {
        handler = canvas_handlers[event];
        this.canvas.addEventListener(event, handler, false);
      }
      window_handlers = {
        'keypress': function(e) {
          return _this.handle_keypress(e);
        },
        'keydown': function(e) {
          return _this.handle_keydown(e);
        },
        'keyup': function(e) {
          return _this.handle_keyup(e);
        }
      };
      for (event in window_handlers) {
        handler = window_handlers[event];
        window.addEventListener(event, handler, false);
      }
    }

    FSMDesigner.ModalBehaviors = {
      POINTER: 'pointer',
      CREATE: 'create'
    };

    FSMDesigner.KeyCodes = {
      BACKSPACE: 8,
      SHIFT: 16,
      DELETE: 46,
      UNDO: 26,
      REDO: 25,
      z: 122,
      Z: 90
    };

    FSMDesigner.prototype.autosave = function() {
      if (!((typeof localStorage !== "undefined" && localStorage !== null) && (typeof JSON !== "undefined" && JSON !== null))) {
        return;
      }
      return localStorage['fsm'] = this.serialize();
    };

    FSMDesigner.prototype.clear = function(no_save) {
      if (!no_save) {
        this.save_undo_step();
      }
      this.states = [];
      this.transitions = [];
      this.selected = null;
      this.current_target = null;
      return this.draw();
    };

    FSMDesigner.prototype.create_state_at_location = function(x, y) {
      this.save_undo_step();
      this.selected = new State(x, y, this);
      this.states.push(this.selected);
      this.reset_caret();
      return this.draw();
    };

    FSMDesigner.prototype.create_transition_cue = function(mouse) {
      var target_state;
      target_state = this.find_state_at_position(mouse.x, mouse.y);
      if (this.selected != null) {
        this.current_transition = target_state === this.selected(new SelfTransition(this.selected, mouse, this)) ? void 0 : (typeof target_state === "function" ? target_state(new Transition(this.selected, target_state, this)) : void 0) ? void 0 : new TemporaryTransition(this.selected.closest_point_on_circle(mouse.x, mouse.y), mouse, this);
      } else {
        this.current_transition = (typeof target_state === "function" ? target_state(new ResetTransition(target_state, this.original_click, this)) : void 0) ? void 0 : new TemporaryTransition(this.original_click, mouse);
      }
      return this.draw();
    };

    FSMDesigner.prototype.dehydrate = function() {
      var designer_state, s, t;
      designer_state = {
        states: (function() {
          var _i, _len, _ref, _results;
          _ref = this.states;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            _results.push(this.dehydrate_state(s));
          }
          return _results;
        }).call(this),
        transitions: (function() {
          var _i, _len, _ref, _results;
          _ref = this.transitions;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            t = _ref[_i];
            _results.push(this.dehydrate_transition(t));
          }
          return _results;
        }).call(this)
      };
      return designer_state;
    };

    FSMDesigner.prototype.dehydrate_state = function(state) {
      var dehydrated;
      dehydrated = {
        x: state.x,
        y: state.y,
        text: state.text,
        outputs: state.outputs,
        is_accept_state: state.is_accept_state,
        radius: radius
      };
      return dehydrated;
    };

    FSMDesigner.prototype.dehydrate_transition = function(transition) {
      var dehydrated;
      if (transition instanceof SelfTransition) {
        dehydrated = {
          type: 'SelfTransition',
          state: this.states.indexOf(transition.state),
          text: transition.text,
          anchor_angle: state.anchor_angle
        };
      } else if (transition instanceof ResetTransition) {
        dehydrated = {
          type: 'ResetTransition',
          states: this.states.indexOf(transition.state),
          text: transition.text,
          delta_x: transition.delta_x,
          delta_y: transition.delta_y
        };
      } else if (transition instanceof Transition) {
        dehydrated = {
          type: 'Transition',
          source: this.states.indexOf(transition.source),
          destination: this.states.indexOf(transition.destination),
          line_angle_adjustment: transition.line_angle_adjustment,
          parallel_part: transition.parallel_part,
          perpendicular_part: transition.perpendicular_part
        };
      }
      return dehydrated;
    };

    FSMDesigner.prototype["delete"] = function(obj) {
      this.delete_state(obj);
      return this.delete_transition(obj);
    };

    FSMDesigner.prototype.delete_state = function(state, no_redraw, no_save) {
      var s, selected, t;
      if (__indexOf.call(this.states, state) < 0) {
        return;
      }
      if (!no_save) {
        this.save_undo_step();
      }
      if (selected === state) {
        selected = null;
      }
      this.states = (function() {
        var _i, _len, _ref, _results;
        _ref = this.states;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          if (s !== state) {
            _results.push(s);
          }
        }
        return _results;
      }).call(this);
      this.transitions = (function() {
        var _i, _len, _ref, _results;
        _ref = this.transitions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          if (!transition.connectedTo(state)) {
            _results.push(t);
          }
        }
        return _results;
      }).call(this);
      if (!no_redraw) {
        return this.draw();
      }
    };

    FSMDesigner.prototype.delete_transition = function(transition, no_redraw, no_save) {
      var selected, t;
      if (__indexOf.call(this.transitions, transition) < 0) {
        return;
      }
      if (!no_save) {
        this.save_undo_step();
      }
      if (selected === transition) {
        selected = null;
      }
      this.transitions = (function() {
        var _i, _len, _ref, _results;
        _ref = this.transitions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          if (t !== transition) {
            _results.push(t);
          }
        }
        return _results;
      }).call(this);
      if (!no_redraw) {
        return this.draw();
      }
    };

    FSMDesigner.prototype.draw = function() {
      var context;
      context = this.canvas.getContext('2d');
      this.draw_using(context);
      return this.autosave;
    };

    FSMDesigner.prototype.draw_using = function(context) {
      var state, transition, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      context.save();
      context.translate(0.5, 0.5);
      _ref = this.states;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        state = _ref[_i];
        state.draw_using(context);
      }
      _ref1 = this.transitions;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        transition = _ref1[_j];
        transition.draw_using(context);
      }
      if ((_ref2 = this.currentTransition) != null) {
        _ref2.draw_using(context);
      }
      return context.restore();
    };

    FSMDesigner.prototype.export_png = function() {
      var png_data, temp_selected;
      temp_selected = this.selected;
      this.selected = null;
      this.draw();
      png_data = canvas.toDataURL('image/png');
      window.open(png_data, '_blank');
      window.focus();
      this.selected = temp_selected;
      return this.draw();
    };

    FSMDesigner.prototype.find_object_at_position = function(x, y) {
      return this.find_transition_at_position(x, y) || this.find_state_at_position(x, y);
    };

    FSMDesigner.prototype.find_state_at_position = function(x, y) {
      var state, _i, _len, _ref;
      _ref = this.states;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        state = _ref[_i];
        if (state.contains_point(x, y)) {
          return state;
        }
      }
      return null;
    };

    FSMDesigner.prototype.find_transition_at_position = function(x, y) {
      var transition, _i, _len, _ref;
      _ref = this.transitions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        transition = _ref[_i];
        if (transition.contains_point(x, y)) {
          return transition;
        }
      }
      return null;
    };

    FSMDesigner.prototype.handle_drop = function(e) {
      e.stopPropagation();
      e.preventDefault();
      if (e.dataTransfer.files.length !== 1) {
        return;
      }
      return this.load_from_file(e.dataTransfer.files[0]);
    };

    FSMDesigner.prototype.handle_backspace = function() {
      if (this.inOutputMode && this.selected.outputs) {
        return this.selected.outputs = this.selected.outputs.slice(0, -1);
      } else if (this.selected.text) {
        return this.selected.text = this.selected.text.slice(0, -1);
      }
    };

    FSMDesigner.prototype.handle_doubleclick = function(e) {
      var mouse;
      handle_modal_behavior();
      mouse = cross_browser_relative_mouse_position(e);
      this.selected = this.find_object_at_position(mouse.x, mouse.y);
      this.reset_text_extry();
      this.in_output_mode = false;
      if (this.selected == null) {
        this.create_state_at_location(mouse.x, mouse.y);
      } else if (this.selected instanceof State) {
        this.in_output_mode = true;
      }
      return this.draw();
    };

    FSMDesigner.prototype.handle_keydown = function(e) {
      var key;
      key = cross_browser_key(e);
      if (key === FSMDesigner.KeyCodes.SHIFT) {
        this.modalBehavior = FSMDesigner.ModalBehaviors.CREATE;
      }
      if (!this.hasFocus()) {
        return;
      }
      if (key === FSMDesigner.KeyCodes.BACKSPACE) {
        this.save_text_undo_step();
        this.handle_backspace();
        this.reset_caret();
        this.draw();
        return false;
      }
      if (key === FSMDesigner.KeyCodes.DELETE) {
        return this.delete_object(this.selected);
      }
    };

    FSMDesigner.prototype.handle_keypress = function(e) {
      var key;
      if (!this.has_focus()) {
        return;
      }
      key = cross_browser_key(e);
      if (FSMDesigner.keypress_is_printable(e)) {
        this.handle_text_entry(key);
        return false;
      }
      if (FSMDesigner.keypress_represents_undo(e)) {
        this.undo();
        return false;
      }
      if (FSMDesigner.keypress_represents_redo(e)) {
        this.redo();
        return false;
      }
      if (key === FSMDesigner.KeyCodes.BACKSPACE) {
        return false;
      }
    };

    FSMDesigner.prototype.handle_keyup = function(e) {
      var key;
      key = cross_browser_key(e);
      if (key === FSMDesigner.KeyCodes.SHIFT) {
        return this.modalBehavior = FSMDesigner.ModalBehaviors.POINTER;
      }
    };

    FSMDesigner.prototype.handle_mousedown = function(e) {
      var mouse;
      if (this.dialog_open) {
        return;
      }
      mouse = cross_browser_relative_mouse_position(e);
      this.moving_object = false;
      this.in_output_mode = false;
      this.original_click = false;
      this.reset_text_extry();
      this.selected = this.find_object_at_position(mouse.x, mouse.y);
      if (this.selected != null) {
        if (this.modal_behavior === FSMDesigner.ModalBehaviors.CREATE && this.selected instanceof State) {
          this.current_transition = new SelfTransition(this.selected, mouse, this);
        } else if (this.modal_behavior === FSMDesigner.ModalBehaviors.POINTER) {
          this.start_moving_selected();
        } else if (this.modal_behavior === FSMDesigner.ModalBehaviors.CREATE) {
          this.current_transition = TemporaryTransition(mouse, mouse);
        }
        this.draw();
        if (this.hasFocus()) {
          return false;
        }
        this.reset_caret();
        return true;
      }
    };

    FSMDesigner.prototype.handle_mousemove = function(e) {
      var mouse;
      if (this.dialog_open) {
        return;
      }
      mouse = cross_browser_relative_mouse_position(e);
      if (this.current_transition != null) {
        this.create_transition_cue(mouse);
      }
      if (this.moving_object != null) {
        return this.handle_object_move(move);
      }
    };

    FSMDesigner.prototype.handle_object_move = function(mouse) {
      this.selected.move_to(mouse.x, mouse.y);
      if (this.selected instanceof State) {
        this.handle_state_snap();
      }
      return this.draw();
    };

    FSMDesigner.prototype.handle_state_snap = function() {
      var distance, state, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = states.length; _i < _len; _i++) {
        state = states[_i];
        if (state === this.selected) {
          continue;
        }
        distance = state.distance_from(this.selected);
        if (Math.abs(distance.x) < this.snap_to_padding) {
          this.selected.x = state.x;
        }
        if (Math.abs(distance.y) < this.snap_to_padding) {
          _results.push(this.selected.y = state.yu);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    FSMDesigner.prototype.handle_text_entry = function(key) {
      if (this.selected == null) {
        return;
      }
      this.save_text_undo_step();
      if (this.in_output_mode && (this.selected.outputs != null)) {
        this.selected.outputs += String.fromCharCode(key);
      } else {
        this.selected.text += String.fromCharCode(key);
      }
      this.reset_caret();
      return this.draw();
    };

    FSMDesigner.prototype.hasFocus = function() {
      if (document.getElementById('helppanel').style.visibility === 'visible') {
        return false;
      }
      return document.activeElement || document.body === document.body;
    };

    FSMDesigner.keypress_is_printable = function(e) {
      var key;
      key = cross_browser_key(e);
      return key >= 0x20 && key <= 0x7E && !e.metaKey && !e.altKey && !e.ctrlKey;
    };

    FSMDesigner.keypress_represents_redo = function(e) {
      var key;
      key = cross_browser_key(e);
      return (key === FSMDesigner.KeyCodes.Y && e.ctrlKey) || (key === FSMDesigner.KeyCodes.REDO) || (key === FSMDesigner.KeyCodes.z && e.ctrlKey && e.shiftKey) || (key === FSMDesigner.KeyCodes.UNDO && e.shiftKey);
    };

    FSMDesigner.keypress_represents_undo = function(e) {
      var key;
      key = cross_browser_key(e);
      return (key === FSMDesigner.KeyCodes.z && e.ctrlKey && !e.shiftKey) || (key === FSMDesigner.KeyCodes.UNDO && !e.shiftKey);
    };

    FSMDesigner.prototype.load_from_file = function(file) {
      var reader;
      this.save_undo_step();
      reader = new FileReader();
      reader.onload = function(file) {
        return this.unserialize(file.target.result);
      };
      return reader.readAsText(file);
    };

    FSMDesigner.prototype.redo = function() {
      if (this.redo_stack.length === 0) {
        return;
      }
      this.save_undo_step();
      this.recreate_state(this.redo_stack.pop());
      return this.draw();
    };

    FSMDesigner.rehydrate = function(dehydrated, canvas) {
      var designer;
      designer = new FSMDesigner(canvas);
      designer.replace_with_rehydrated(dehydrated);
      return designer;
    };

    FSMDesigner.prototype.rehydrate_state = function(dehydrated) {
      var state;
      state = new State(dehydrated.x, dehydrated.y, this);
      state.is_accept_state = dehydrated.is_accept_state;
      state.text = dehydrated.text;
      state.outputs = dehydrated.outputs;
      state.radius = dehydrated.radius;
      return state;
    };

    FSMDesigner.prototype.rehydrate_transition = function(dehydrated) {
      var destination, source, state, transition;
      transition = null;
      switch (dehydrated.type) {
        case 'SelfTransition':
        case 'SelfLink':
          state = this.states[dehydrated.state || dehydrated.node];
          transition = new SelfTransition(state, null, this);
          transition.anchor_angle = dehydrated.anchor_angle || dehydrated.anchorAngle;
          transition.text = dehydrated.text;
          break;
        case 'StartTransition':
        case 'StartLink':
          state = this.states[dehydrated.state || dehydrated.node];
          transition = new StartTransition(this.states[state], null, this);
          transition.delta_x = dehydrated.delta_x || dehydrated.deltaX;
          transition.delta_y = dehydrated.delta_y || dehydrated.deltaY;
          transition.text = dehydrated.text;
          break;
        case 'Transition':
        case 'Link':
          source = this.states[dehydrated.source || dehydrated.nodeA];
          destination = this.states[dehydrated.destination || dehydrated.nodeB];
          transition = new Transition(source, destination, this);
          transition.parallel_part = dehydrated.parallel_part || dehydrated.parallelPart;
          transition.perpendicular_part = dehydrated.perpendicular_part || dehydrated.perpendicularPart;
          transition.text = dehydrated.text;
          transition.line_angle_adjustment = dehydrated.line_angle_adjustment || dehydrated.lineAngleAdjust;
      }
      return transition;
    };

    FSMDesigner.prototype.replace_with_rehydrated = function(dehyrated) {
      var s, states, t, transitions;
      this.clear(true);
      states = dehydrated.states || dehydrated.nodes;
      transitions = dehydrated.transitions || dehydrated.nodes;
      this.states = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = states.length; _i < _len; _i++) {
          s = states[_i];
          _results.push(this.rehydrate_state(s));
        }
        return _results;
      }).call(this);
      this.transitions = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = transitions.length; _i < _len; _i++) {
          t = transitions[_i];
          _results.push(this.rehydrate_transition(t));
        }
        return _results;
      }).call(this);
      return this.draw();
    };

    FSMDesigner.prototype.reset_text_entry = function() {
      if (this.text_entry_timeout != null) {
        clearTimeout(this.text_entry_timeout);
        return this.text_entry_timeout = null;
      }
    };

    FSMDesigner.prototype.save_file_data_uri = function() {
      var content, uri_content;
      content = this.serialize();
      uri_content = 'data:application/x-fsm,' + encodeURIComponent(content);
      return document.location.href = uri_content;
    };

    FSMDesigner.prototype.save_undo_step = function() {
      var last_state, state;
      state = this.get_state();
      last_state = this.undo_stack.slice(-1);
      if (FSMDesigner.states_equivalent(state, last_state)) {
        return;
      }
      if (this.undo_stack.length >= this.undo_history_size) {
        this.undo_stack.shift();
      }
      return this.undo_stack.push(state);
    };

    FSMDesigner.prototype.save_redo_step = function() {
      if (this.redo_stack.length >= this.redo_history_size) {
        this.redo_stack.shift();
      }
      return this.redo_stack.push(this.get_state);
    };

    FSMDesigner.prototype.save_text_undo_step = function(force) {
      var cancel_timeout,
        _this = this;
      if (force == null) {
        force = false;
      }
      cancel_timeout = function() {
        return _this.text_entry_timout = null;
      };
      if (this.text_entry_timeout != null) {
        clearTimeout(this.text_entry_timeout);
      }
      if (!this.text_entry_timeout || force) {
        this.save_undo_step();
      }
      return this.text_entry_timeout = setTimeout(cancel_timeout, this.text_undo_delay);
    };

    FSMDesigner.prototype.serialize = function() {
      return JSON.stringify(this.get_state());
    };

    FSMDesigner.prototype.start_moving_selected = function() {
      var _base;
      this.save_undo_step();
      this.moving_object = true;
      this.delta_mouse_x = this.delta_mouse_y = 0;
      if (typeof (_base = this.selected).set_mouse_start === "function") {
        _base.set_mouse_start(mouse.x, mouse.y);
      }
      return this.reset_caret();
    };

    FSMDesigner.prototype.undo = function() {
      if (this.undo_stack.length === 0) {
        return;
      }
      this.save_redo_step();
      this.recreate_state(this.undo_stack.pop());
      return this.draw();
    };

    FSMDesigner.states_equivalent = function(a, b) {
      return JSON.stringify(a) === JSON.stringify(b);
    };

    return FSMDesigner;

  })();

  Transition = (function() {

    function Transition(source, destination, parent) {
      this.source = source;
      this.destination = destination;
      this.parent = parent;
      this.font = '16px "Inconsolata", monospace';
      this.fg_color = 'black';
      this.bg_color = 'white';
      this.selected_color = 'blue';
      this.text = '';
      this.line_angle_adjustment = 0;
      this.parallel_part = 0.5;
      this.perpendicular_part = 0;
      this.snap_to_straight_padding = this.parent.snap_to_padding;
    }

    Transition.prototype.connected_to = function(state) {
      return this.source === state || this.destination === state;
    };

    Transition.prototype.get_deltas = function() {
      var displacement;
      displacement = {
        x: this.destination.x - this.source.x,
        y: this.destination.y - this.source.y,
        scale: Math.sqrt(dx * dx + dy * dy)
      };
      return displacement;
    };

    Transition.prototype.get_location = function() {
      var d, location;
      d = this.get_deltas();
      location = {
        x: this.source.x + d.x * this.parallel_part - d.y * this.perpendicular_part / d.scale,
        y: this.source.y + d.y * this.parallel_part + d.x * this.perpendicular_part / d.scale
      };
      return location;
    };

    Transition.prototype.is_almost_straight = function() {
      return this.parallel_part > 0 && this.parallel_part < 1 && Math.abs(this.perpendicular_part) < this.snap_to_straight_padding;
    };

    Transition.prototype.move_to = function() {
      var d, offset_x, offset_y;
      d = this.get_deltas();
      offset_x = x - this.source.x;
      offset_y = y - this.source.y;
      this.parallel_part = (d.x * offset_x + d.y * offset_y) / (d.scale * d.scale);
      this.perpendicular_part = (d.x * offset_y + d.y * offset_x) / d.scale;
      if (this.is_accept_straight()) {
        return this.snap_to_straight();
      }
    };

    Transition.prototype.snap_to_straight = function() {
      this.line_angle_adjustment = (this.perpendicular_part < 0) * Math.PI;
      return this.perpendicular_part = 0;
    };

    return Transition;

  })();

}).call(this);
